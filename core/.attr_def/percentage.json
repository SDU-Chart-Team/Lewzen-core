{
    "type": "percentage",
    "includes": [
        "regex"
    ],
    "comment": "Percentages are specified as a number followed by a \"%\" character:\n```\npercentage ::= number \"%\"\n```\nNote that the definition of <number> depends on whether the percentage is specified in a stylesheet or in an attribute that is not also a presentation attribute.\nPercentage values are always relative to another value (for example, a length). Each attribute or property that allows percentages also defines the reference distance measurement to which the percentage refers.\nWithin the SVG DOM, a <percentage> is represented using an SVGNumber or SVGAnimatedNumber object.",
    "accepts": [
        {
            "ctype": "int",
            "cname": "integer",
            "to_string": "return std::to_string(attr) + \"%\";"
        },
        {
            "ctype": "float",
            "cname": "float",
            "to_string": "return std::to_string(attr) + \"%\";"
        },
        {
            "ctype": "double",
            "cname": "double",
            "to_string": "return std::to_string(attr) + \"%\";"
        },
        {
            "ctype": "long",
            "cname": "long",
            "to_string": "return std::to_string(attr) + \"%\";"
        },
        {
            "ctype": "long long int",
            "cname": "long integer",
            "to_string": "return std::to_string(attr) + \"%\";"
        },
        {
            "ctype": "long double",
            "cname": "long double",
            "to_string": "return std::to_string(attr) + \"%\";"
        },
        {
            "ctype": "std::string",
            "cname": "legal string",
            "to_string": "if (!is_legal_string(attr)) {\n    _LZ_WARNING(\"Illegal string when converting \\\"\" << attr << \"\\\" to Percentage.\")\n    return STR_NULL;\n} else {\n    return attr;\n}",
            "additional_funcs": [
                {
                    "declaration": "static bool is_legal_string(const std::string &attr);",
                    "comment": "Check if a string is legal as a Percentage attribute.",
                    "implementation": "std::regex re(R\"(^(([+-]?[0-9]+)([Ee]([+-]?[0-9]+))?|[+-]?[0-9]*\\.[0-9]+([Ee]([+-]?[0-9]+))?)%$)\");\nreturn std::regex_match(attr, re);"
                }
            ]
        }
    ]
}